file = fullfile(pathname,filename);

im=imread(file);
figure,imshow(im);filename,pathname] = uigetfile('*.jpg;*.tif;*.png;*.jpeg;*.bmp;*.pgm;*.gif','pick an imgae');

title('Input Image');

%% Preprocessing

% Smoothing Image 

R=im(:,:,1);
G=im(:,:,2);
B=im(:,:,3);

H = fspecial('Gaussian',[9 9],0.06);
RG = imfilter(R,H);
GG = imfilter(G,H);
BG = imfilter(B,H);
GaussF = cat(3,RG,GG,BG);[
figure,imshow(GaussF);
title('Smoothed Image');

% Contrast Enhancement Image 

H1=adapthisteq(GaussF(:,:,1));
H2=adapthisteq(GaussF(:,:,2));
H3=adapthisteq(GaussF(:,:,3));
H=cat(3,H1,H2,H3);
figure,imshow(H);
title('Contrast Enhanced Image');

%% Segmentation 

% Lab Color Conversion 

cform = makecform('srgb2lab');


lab_he = applycform(im,cform);
figure,imshow(lab_he);
title('Lab Color Space Image');

ab = double(lab_he(:,:,2:3));
nrows = size(ab,1);
ncols = size(ab,2);
ab = reshape(ab,nrows*ncols,2);
nColors = 3;
[cluster_idx cluster_center] = kmeans(ab,nColors,'distance','sqEuclidean', ...
                                      'Replicates',3);

pixel_labels = reshape(cluster_idx,nrows,ncols);

segmented_images = cell(1,3);

rgb_label = repmat(pixel_labels,[1,1,3]);

for k = 1:nColors
    colors = im;
    colors(rgb_label ~= k) = 0;
    segmented_images{k} = colors;
end


figure, subplot(1,3,1);imshow(segmented_images{1});title('Cluster 1'); subplot(1,3,2);imshow(segmented_images{2});title('Cluster 2');
subplot(1,3,3);imshow(segmented_images{3});title('Cluster 3');
set(gcf, 'Position', get(0,'Screensize'));


x = inputdlg('Enter the cluster no. containing the ROI only:');
i = str2double(x);
seg_img = segmented_images{i};

figure,imshow(seg_img);
title('Segmented Image using K-Means Clustering');


%% Thresholding and Morphological Operation 

TH=im2bw(seg_img,0.007);
MO=imfill(TH,'holes');

R=im(:,:,1);
G=im(:,:,2);
B=im(:,:,3);

R(~MO)=0;
G(~MO)=0;
B(~MO)=0;

FS=cat(3,R,G,B);
figure,imshow(FS);
title('Final Segmented Image');
FS=imresize(FS,[480 640]);

%% Feature Extraction - Color,Texture & Shape

% Color Feature Extraction 

[rows, cols, numOfBands] = size(FS);

image = rgb2hsv(FS);
figure,
imshow(image);
title('HSV Image for Color Feature');

h = image(:, :, 1);
s = image(:, :, 2);
v = image(:, :, 3);


numberOfLevelsForH = 8;
numberOfLevelsForS = 2;
numberOfLevelsForV = 2;

maxValueForH = max(h(:));
maxValueForS = max(s(:));
maxValueForV = max(v(:));

hsvColorHistogram = zeros(8, 2, 2);

index = zeros(rows*cols, 3);

count = 1;
for row = 1:size(h, 1)
    for col = 1 : size(h, 2)
        quantizedValueForH(row, col) = ceil(numberOfLevelsForH * h(row, col)/maxValueForH);
        quantizedValueForS(row, col) = ceil(numberOfLevelsForS * s(row, col)/maxValueForS);
        quantizedValueForV(row, col) = ceil(numberOfLevelsForV * v(row, col)/maxValueForV);
        
        
        index(count, 1) = quantizedValueForH(row, col);
        index(count, 2) = quantizedValueForS(row, col);
        index(count, 3) = quantizedValueForV(row, col);
        count = count+1;
    end
end


for row = 1:size(index, 1)
    if (index(row, 1) == 0 || index(row, 2) == 0 || index(row, 3) == 0)
        continue;
    end
    hsvColorHistogram(index(row, 1), index(row, 2), index(row, 3)) = ... 
        hsvColorHistogram(index(row, 1), index(row, 2), index(row, 3)) + 1;
end

% normalize hsvHist to unit sum

hsvColorHistogram = hsvColorHistogram(:)';
hsvHist = hsvColorHistogram/sum(hsvColorHistogram);

Mean=mean2(hsvHist)
Standard_Deviation = std2(hsvHist)

F1=[Mean,Standard_Deviation];

f = figure('name','Color Features','Position',[500 400 400 90]);
cnames = {'Features'};
rnames={'Mean','Standard Deviation'};

t = uitable('Parent',f,'Data',[F1]','ColumnName',cnames, 'RowName',rnames,... 
               'Position',[30 30 300 60]); 
           
 pause(2);          

% Texture Feature Extraction 

grim=rgb2gray(FS);
figure,imshow(grim);
title('Gray Image for Texture Feature');
glcms = graycomatrix(grim);

stats = graycoprops(glcms,'Contrast Correlation Energy Homogeneity');
Contrast = stats.Contrast
Correlation = stats.Correlation
Energy = stats.Energy
Homogeneity = stats.Homogeneity

F2 = [Contrast Correlation Energy Homogeneity];

f = figure('name','Texture Features','Position',[500 400 400 260]);
cnames = {'Features'};
rnames={'Contrast','Correlation','Energy','Homogeneity'};


t = uitable('Parent',f,'Data',[F2]','ColumnName',cnames, 'RowName',rnames,... 
               'Position',[30 30 300 220]); 

pause(2);  

% Shape Feature Extraction

BW=im2bw(FS,0.1);
figure,imshow(BW);
title('Binary Image for Shape Feature');

Area = mean2(nnz(BW))
F3=Area;

f = figure('name','Shape Feature','Position',[500 400 400 70]);
cnames = {'Feature'};
rnames={'Area'};

t = uitable('Parent',f,'Data',[F3]','ColumnName',cnames, 'RowName',rnames,... 
               'Position',[30 30 300 40]); 
           
 pause(2);               

% Final Feature 

F=[F1 F2 F3];

FV=mean2(F)

%% Classification - KNN Classifier

FD=xlsread('Train_Features.xlsx');

training=FD(:,1);
group=FD(:,2);

class = knnclassify(FV, training, group);

im=imresize(im,[480 640]);

% z=serial('COM4','Baudrate',9600);

if class == 1
       figure,
       imshow(im);
       title('Classified result');
hold on
boundaries = bwboundaries(BW);
numberOfBoundaries = size(boundaries, 1);
for k = 1 : numberOfBoundaries
	thisBoundary = boundaries{k};
	plot(thisBoundary(:,2), thisBoundary(:,1), 'r', 'LineWidth', 2);
end
hold off;
text(12,20, 'Paddy Bacterial Leaf Blight', 'Color','b','fontname','Times New Roman', 'FontWeight','bold', 'FontSize',18);
msgbox('Paddy Bacterial Leaf Blight','Result');


%%% Hardware %%%

% fopen(z);
% pause(1);
% fprintf(z,'1');
% fclose(z);

%%%%%%%%%%%%%%%%

elseif class == 2
       figure,
       imshow(im);
       title('Classified result');
hold on
boundaries = bwboundaries(BW);
numberOfBoundaries = size(boundaries, 1);
for k = 1 : numberOfBoundaries
	thisBoundary = boundaries{k};
	plot(thisBoundary(:,2), thisBoundary(:,1), 'r', 'LineWidth', 2);
end
hold off;
text(12,20, 'Paddy Brown Spot', 'Color','b','fontname','Times New Roman', 'FontWeight','bold', 'FontSize',18);
msgbox('Paddy Brown Spot','Result');

%%% Hardware %%%


% fopen(z);
% pause(5);
% fprintf(z,'2');
% fclose(z);

%%%%%%%%%%%%%%%%

elseif class == 3
       figure,
       imshow(im);
       title('Classified result');
hold on
boundaries = bwboundaries(BW);
numberOfBoundaries = size(boundaries, 1);
for k = 1 : numberOfBoundaries
	thisBoundary = boundaries{k};
	plot(thisBoundary(:,2), thisBoundary(:,1), 'r', 'LineWidth', 2);
end
hold off;
text(12,20, 'Paddy Leaf Blast', 'Color','b','fontname','Times New Roman', 'FontWeight','bold', 'FontSize',18);
msgbox('Paddy Leaf Blast','Result');

%%% Hardware %%%

% fopen(z);
% pause(5);
% fprintf(z,'3');
% fclose(z);

%%%%%%%%%%%%%%%%

elseif class == 4
       figure,
       imshow(im);
       title('Classified result');
hold on
boundaries = bwboundaries(BW);
numberOfBoundaries = size(boundaries, 1);
for k = 1 : numberOfBoundaries
	thisBoundary = boundaries{k};
	plot(thisBoundary(:,2), thisBoundary(:,1), 'r', 'LineWidth', 2);
end
hold off;
text(12,20, 'Healthy Leaf', 'Color','b','fontname','Times New Roman', 'FontWeight','bold', 'FontSize',18);
msgbox('Healthy Leaf','Result');

 pause(2);    

%%% Hardware %%%

% fopen(z);
% pause(5);
% fprintf(z,'4');
% fclose(z);

%%%%%%%%%%%%%%%%
       
end 

%% Performance Analysis

A11=20; 

confMat=[9 1;0 10];    
TP=confMat(1,1);
FN=confMat(1,2);
FP=confMat(2,1);
TN=confMat(2,2);

disp('Performance Metrics in %:')

Accuracy=((TP+TN)/A11).*100

Precision=(TP/(TP+FP)).*100

Sensitivity=(TP/(TP+FN))*100

Specificity=(TN/(FP+TN)).*100

f = figure('name','Performance Analysis','Position',[500 400 400 260]);
cnames = {'Metrics'};
rnames={'Accuracy','Precision','Sensitivity','Specificity'};


t = uitable('Parent',f,'Data',[Accuracy Precision Sensitivity Specificity]','ColumnName',cnames, 'RowName',rnames,... 
               'Position',[30 30 300 220]); 


